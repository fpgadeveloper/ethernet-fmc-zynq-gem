From d097357dcd164508a98bfbf3db11becdbf612768 Mon Sep 17 00:00:00 2001
From: Piyush Mehta <piyush.mehta@xilinx.com>
Date: Mon, 16 May 2022 18:36:49 +0530
Subject: [LINUX PATCH] usb: dwc3: xilinx: fix usb3 non-wakeup source resume
 failure

When USB is in super-speed mode and disabled as a wakeup source,
observed that on the resume path, lanes have not been configured
properly in the phy-zynqmp driver.

Workaround:
To resolved above issue, added phy_init on resume and phy_exit
on suspend path to configure the GT lanes correctly.
The re-initialization of phy, reset the device and re-enumerate
the USB subsystem.
This use-case is specific to zynqmp and usb super-speed mode.

Note:
With the above fix below warnings messages are coming, but USB
functionality is not impacting.
Disable of device-initiated U1 failed
Disable of device-initiated U2 failed

Signed-off-by: Piyush Mehta <piyush.mehta@xilinx.com>
---
Branch: master-next-test
CR: CR-1130331
---
 drivers/usb/dwc3/dwc3-xilinx.c | 32 ++++++++++++++++++++++++--------
 1 file changed, 24 insertions(+), 8 deletions(-)

diff --git a/drivers/usb/dwc3/dwc3-xilinx.c b/drivers/usb/dwc3/dwc3-xilinx.c
index 269c8b2..b297814 100644
--- a/drivers/usb/dwc3/dwc3-xilinx.c
+++ b/drivers/usb/dwc3/dwc3-xilinx.c
@@ -80,6 +80,7 @@ struct dwc3_xlnx {
 	int				(*pltfm_init)(struct dwc3_xlnx *data);
 	struct regulator		*dwc3_pmu;
 	struct regulator_dev		*dwc3_xlnx_reg_rdev;
+	struct phy			*usb3_phy;
 	enum dwc3_xlnx_core_state	pmu_state;
 	bool				wakeup_capable;
 	struct reset_control		*crst;
@@ -379,7 +380,6 @@ static int dwc3_xlnx_init_zynqmp(struct dwc3_xlnx *priv_data)
 {
 	struct device		*dev = priv_data->dev;
 	struct reset_control	*crst, *hibrst, *apbrst;
-	struct phy		*usb3_phy;
 	int			ret;
 	u32			reg;
 	struct gpio_desc	*reset_gpio = NULL;
@@ -409,11 +409,11 @@ static int dwc3_xlnx_init_zynqmp(struct dwc3_xlnx *priv_data)
 		goto err;
 	}
 
-	usb3_phy = devm_phy_get(dev, "usb3-phy");
-	if (PTR_ERR(usb3_phy) == -EPROBE_DEFER) {
+	priv_data->usb3_phy = devm_phy_get(dev, "usb3-phy");
+	if (PTR_ERR(priv_data->usb3_phy) == -EPROBE_DEFER) {
 		ret = -EPROBE_DEFER;
 		goto err;
-	} else if (IS_ERR(usb3_phy)) {
+	} else if (IS_ERR(priv_data->usb3_phy)) {
 		ret = 0;
 		goto skip_usb3_phy;
 	}
@@ -436,9 +436,9 @@ static int dwc3_xlnx_init_zynqmp(struct dwc3_xlnx *priv_data)
 		goto err;
 	}
 
-	ret = phy_init(usb3_phy);
+	ret = phy_init(priv_data->usb3_phy);
 	if (ret < 0) {
-		phy_exit(usb3_phy);
+		phy_exit(priv_data->usb3_phy);
 		goto err;
 	}
 
@@ -466,9 +466,9 @@ static int dwc3_xlnx_init_zynqmp(struct dwc3_xlnx *priv_data)
 		goto err;
 	}
 
-	ret = phy_power_on(usb3_phy);
+	ret = phy_power_on(priv_data->usb3_phy);
 	if (ret < 0) {
-		phy_exit(usb3_phy);
+		phy_exit(priv_data->usb3_phy);
 		goto err;
 	}
 
@@ -691,6 +691,11 @@ static int __maybe_unused dwc3_xlnx_suspend(struct device *dev)
 #endif
 		/* Disable the clocks */
 		clk_bulk_disable(priv_data->num_clocks, priv_data->clks);
+
+		if (of_device_is_compatible(dev->of_node, "xlnx,zynqmp-dwc3") &&
+		    (!(readl(priv_data->regs + XLNX_USB_FPD_PIPE_CLK)))) {
+			phy_exit(priv_data->usb3_phy);
+		}
 	}
 	return 0;
 }
@@ -713,6 +718,17 @@ static int __maybe_unused dwc3_xlnx_resume(struct device *dev)
 	if (ret)
 		return ret;
 
+	if (!priv_data->wakeup_capable) {
+		if (of_device_is_compatible(dev->of_node, "xlnx,zynqmp-dwc3") &&
+		    (!(readl(priv_data->regs + XLNX_USB_FPD_PIPE_CLK)))) {
+			ret = phy_init(priv_data->usb3_phy);
+			if (ret < 0) {
+				phy_exit(priv_data->usb3_phy);
+				return ret;
+			}
+			phy_power_on(priv_data->usb3_phy);
+		}
+	}
 	return 0;
 }
 
-- 
1.8.3.1

